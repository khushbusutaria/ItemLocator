
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;

namespace BusinessLayer
{
    public class tblPermission : _tblPermission
    {
        public tblPermission()
        {

        }

        public DataTable LoadGridData(int intRoleId, bool isSuperAdmin, bool isNew)
        {

            string strTblClause = "";
            string strColumns = "";
            string StrQuery = "";

            if (isSuperAdmin)
            {
                strTblClause = "tblTab as tabTable left join tblPermission as permissionTable ";
                strColumns = " ISNULL(tabTable.appIsAdd, 0) as appIsTabAdd, ISNULL(tabTable.appIsEdit, 0) as appIsTabEdit, ISNULL(tabTable.appIsDelete,0) as appIsTabDelete ";
            }
            else
            {
                strTblClause = "tblPermission as permissionTable inner join tblTab as tabTable ";
                strColumns = " ISNULL(permissionTable.appIsAdd, 0) as appIsTabAdd, ISNULL(permissionTable.appIsEdit, 0) as appIsTabEdit, ISNULL(permissionTable.appIsDelete,0) as appIsTabDelete ";
            }

            if (isNew)
            {
                StrQuery = "select 0 ";
            }
            else
            {
                StrQuery = "select ISNULL(permissionTable.appPermissionId, 0) ";
            }

            StrQuery += " as appPermissionId, tabTable.appTabId, appParentId, appTabName,  ISNULL(permissionTable.appIsAdd, 0) as appIsAdd, ISNULL(permissionTable.appIsEdit, 0) as appIsEdit, ISNULL(permissionTable.appIsDelete,0) as appIsDelete, ";
            StrQuery += " ISNULL(permissionTable.appIsView, 0) as appIsView, ";
            StrQuery += " appParentId, appTabName,  " + strColumns;
            StrQuery += " from " + strTblClause + " on permissionTable.appTabId = tabTable.appTabId and permissionTable.appRoleId = " + intRoleId.ToString();
            StrQuery += " where appIsActive = 1 And appParentId Is not null ";

            if (!isSuperAdmin)
            {
                StrQuery += "and appIsView = 'true' ";
            }

            StrQuery += " order By tabTable.appParentId, tabTable.appDisplayOrder";

            base.LoadFromRawSql(StrQuery);
            return base.DefaultView.Table;
        }

        public DataTable LoadTabsForRole(int intRoleId = 0, bool checkImage = false)
        {

            string StrQuery = "select tblPermission.appRoleId, tblPermission.appTabId, appTabName, appWebPageName, tblTab.appParentId, appIconPath,";
            StrQuery += " tblPermission.AppIsAdd, tblPermission.AppIsEdit, tblPermission.AppIsView, tblPermission.AppIsDelete, tblTab.appDisplayOrder, ";
            StrQuery += " appAddPage, appIsMenu ";
            StrQuery += " from tblPermission inner join tblTab on tblPermission.appTabId = tblTab.appTabId ";
            StrQuery += " where tblPermission.appRoleId = " + intRoleId.ToString() + " and ";
            StrQuery += " tblTab.appIsActive = 1 and tblPermission.appIsView = 'true' ";

            if (checkImage == true)
            {
                StrQuery += " and tblTab.appIsShowOnDashboard = 'true'";
            }

            StrQuery += " order by tblTab.appParentId, tblTab.appDisplayOrder ";

            base.LoadFromRawSql(StrQuery);
            return base.DefaultView.Table;
        }

        public string LoadPermissionsForRole(int roleId)
        {
            string Strquery = "";
            DataTable tempDT = new DataTable();
            string allowedTabsId = null;

            Strquery = "select stuff((select ',' +  cast(appTabId as varchar) from tblPermission where appRoleId = " + roleId.ToString() + " and appIsView = 1 for xml path('')), 1, 1, '')";

            base.LoadFromRawSql(Strquery);
            tempDT = base.DefaultView.Table;
            allowedTabsId = tempDT.Rows[0][0].ToString();
            return allowedTabsId.Substring(0, allowedTabsId.Length - 2);
        }


        public bool DeleteSelectedRoleTab(string roleId)
        {
            string Strquery = "";

            Strquery += "delete from tblPermission where appRoleID = " + roleId;

            base.LoadFromRawSql(Strquery);
            return true;
        }
        public bool CheckAddPermission(int intRoleID, int intTabID, bool isSuperAdmin)
        {
            string strQry = "";
            if (isSuperAdmin == false)
            {
                strQry = "select appIsAdd from tblPermission where appRoleID = " + intRoleID + " and appTabID = " + intTabID + " ";
                base.LoadFromRawSql(strQry);
                if (base.DefaultView.Table.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(base.DefaultView.Table.Rows[0][0].ToString()))
                    {
                        if ((bool)base.DefaultView.Table.Rows[0][0] == true)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }

            }
            else
            {
                return true;
            }
        }
        public bool CheckViewlPermission(int intRoleID, int intTabID, bool isSuperAdmin)
        {
            string strQry = "";
            if (isSuperAdmin == false)
            {
                strQry = "select appIsView from tblPermission where appRoleID = " + intRoleID + " and appTabID = " + intTabID + " ";
                base.LoadFromRawSql(strQry);
                if (base.DefaultView.Table.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(base.DefaultView.Table.Rows[0][0].ToString()))
                    {
                        if ((bool)base.DefaultView.Table.Rows[0][0] == true)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }

            }
            else
            {
                return true;
            }
        }

        public Boolean CheckDeshbordTab(string RoleID)
        {
            string strQry = "";

            if (!string.IsNullOrEmpty(RoleID))
            {
                strQry += "Select * from tblPermission where appTabId = " + (int)Enums.Enum_TabID.Dashboard + " And AppIsView = 1 And AppRoleID = " + RoleID;
            }
            base.LoadFromRawSql(strQry);
            if (base.RowCount > 0)
            {
                return true;
            }
            else
            {
                return false;
            }


        }
        public DataTable SelecteMenusubTabPermission(int roleId)
        {
            string Strquery = "";

            Strquery += "select * from tblPermission where appRoleID = " + roleId + " and AppTabId = " + Enums.Enum_TabID.Menus;


            base.LoadFromRawSql(Strquery);
            return base.DefaultView.Table;
        }

    }
}
